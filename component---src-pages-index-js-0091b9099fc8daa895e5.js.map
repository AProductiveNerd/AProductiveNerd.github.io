{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./src/components/seo.js"],"names":["HomePage","data","title","className","allMdx","edges","map","node","key","id","Body","frontmatter","tags","tagItem","to","fields","slug","style","objectFit","fluid","featuredImage","childImageSharp","date","Text","excerpt","SEO","description","lang","meta","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","htmlAttributes","titleTemplate","name","content","property","social","twitter","concat","defaultProps"],"mappings":"4FAAA,iHAsFeA,UA/EE,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAClB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,MAAM,YACX,kBAAC,IAAD,CAAWC,UAAU,gBAClBF,EAAKG,OAAOC,MAAMC,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OACrB,yBAAKC,IAAKD,EAAKE,IACb,kBAAC,IAAD,CAAMN,UAAU,cACd,kBAAC,IAAKO,KAAN,KACE,uBAAGP,UAAU,YACVI,EAAKI,YAAYC,KAAKN,KAAI,SAAAO,GAAO,OAChC,kBAAC,OAAD,CACEV,UAAU,UACVW,GAAE,SAAWD,EACbL,IAAKK,GAEJA,OAIP,kBAAC,OAAD,CAAMC,GAAIP,EAAKQ,OAAOC,MACpB,gCACE,kBAAC,IAAD,CACEb,UAAU,eACVc,MAAO,CAAEC,UAAW,WACpBC,MACEZ,EAAKI,YAAYS,cAAcC,gBAAgBF,SAIrD,wBAAIhB,UAAU,aAAaI,EAAKI,YAAYT,OAC5C,0BAAMC,UAAU,aAAaI,EAAKI,YAAYW,MAC9C,6BACA,kBAAC,IAAKC,KAAN,CAAWpB,UAAU,aACW,KAA7BI,EAAKI,YAAYa,QACdjB,EAAKiB,QACLjB,EAAKI,YAAYa,oB,kCC3CzC,iDAYMC,EAAM,SAAC,GAAwC,IAAD,MAArCC,EAAqC,EAArCA,YAAaC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,KAAM1B,EAAY,EAAZA,MAC9B2B,EAASC,yBAAe,cAAxBD,KAgBFE,EAAkBL,GAAeG,EAAKG,aAAaN,YACnDO,EAAY,UAAGJ,EAAKG,oBAAR,aAAG,EAAmB9B,MAExC,OACE,kBAAC,IAAD,CACEgC,eAAgB,CACdP,QAEFzB,MAAOA,EACPiC,cAAeF,EAAY,QAAWA,EAAiB,KACvDL,KAAM,CACJ,CACEQ,KAAK,cACLC,QAASN,GAEX,CACEO,SAAS,WACTD,QAASnC,GAEX,CACEoC,SAAS,iBACTD,QAASN,GAEX,CACEO,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,SAAS,UAAAR,EAAKG,oBAAL,mBAAmBO,cAAnB,eAA2BC,UAA3B,IAEX,CACEJ,KAAK,gBACLC,QAASnC,GAEX,CACEkC,KAAK,sBACLC,QAASN,IAEXU,OAAOb,MAKfH,EAAIiB,aAAe,CACjBf,KAAK,KACLC,KAAM,GACNF,YAAY,IAUCD","file":"component---src-pages-index-js-0091b9099fc8daa895e5.js","sourcesContent":["import React from \"react\"\r\nimport { Link, graphql } from \"gatsby\"\r\nimport { Card, Container } from \"react-bootstrap\"\r\nimport Layout from \"../components/layout\"\r\nimport SEO from \"../components/seo.js\"\r\nimport Img from \"gatsby-image\"\r\n\r\nconst HomePage = ({ data }) => {\r\n  return (\r\n    <Layout>\r\n      <SEO title=\"🏡 Home\" />\r\n      <Container className=\"site-content\">\r\n        {data.allMdx.edges.map(({ node }) => (\r\n          <div key={node.id}>\r\n            <Card className=\"index-card\">\r\n              <Card.Body>\r\n                <p className=\"tagArray\">\r\n                  {node.frontmatter.tags.map(tagItem => (\r\n                    <Link\r\n                      className=\"tagItem\"\r\n                      to={`/tags/${tagItem}`}\r\n                      key={tagItem}\r\n                    >\r\n                      {tagItem}\r\n                    </Link>\r\n                  ))}\r\n                </p>\r\n                <Link to={node.fields.slug}>\r\n                  <center>\r\n                    <Img\r\n                      className=\"featured-img\"\r\n                      style={{ objectFit: \"contain\" }}\r\n                      fluid={\r\n                        node.frontmatter.featuredImage.childImageSharp.fluid\r\n                      }\r\n                    />\r\n                  </center>\r\n                  <h4 className=\"cardTitle\">{node.frontmatter.title}</h4>\r\n                  <span className=\"textMuted\">{node.frontmatter.date}</span>\r\n                  <hr />\r\n                  <Card.Text className=\"textMuted\">\r\n                    {node.frontmatter.excerpt === \"\"\r\n                      ? node.excerpt\r\n                      : node.frontmatter.excerpt}\r\n                  </Card.Text>\r\n                </Link>\r\n              </Card.Body>\r\n            </Card>\r\n          </div>\r\n        ))}\r\n      </Container>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport const query = graphql`\r\n  {\r\n    allMdx(\r\n      sort: { fields: frontmatter___date, order: DESC }\r\n      filter: { frontmatter: { type: { eq: \"article\" } } }\r\n    ) {\r\n      edges {\r\n        node {\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            title\r\n            date(formatString: \"MMMM DD, YYYY\")\r\n            tags\r\n            excerpt\r\n            featuredImage {\r\n              childImageSharp {\r\n                fluid(maxWidth: 300) {\r\n                  ...GatsbyImageSharpFluid\r\n                }\r\n              }\r\n            }\r\n          }\r\n          excerpt(pruneLength: 150)\r\n          id\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\nexport default HomePage\r\n","/**\r\n * SEO component that queries for data with\r\n *  Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.com/docs/use-static-query/\r\n */\r\n\r\nimport React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { Helmet } from \"react-helmet\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nconst SEO = ({ description, lang, meta, title }) => {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            social {\r\n              twitter\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  const metaDescription = description || site.siteMetadata.description\r\n  const defaultTitle = site.siteMetadata?.title\r\n\r\n  return (\r\n    <Helmet\r\n      htmlAttributes={{\r\n        lang,\r\n      }}\r\n      title={title}\r\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\r\n      meta={[\r\n        {\r\n          name: `description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          property: `og:description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:type`,\r\n          content: `website`,\r\n        },\r\n        {\r\n          name: `twitter:card`,\r\n          content: `summary`,\r\n        },\r\n        {\r\n          name: `twitter:creator`,\r\n          content: site.siteMetadata?.social?.twitter || ``,\r\n        },\r\n        {\r\n          name: `twitter:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          name: `twitter:description`,\r\n          content: metaDescription,\r\n        },\r\n      ].concat(meta)}\r\n    />\r\n  )\r\n}\r\n\r\nSEO.defaultProps = {\r\n  lang: `en`,\r\n  meta: [],\r\n  description: ``,\r\n}\r\n\r\nSEO.propTypes = {\r\n  description: PropTypes.string,\r\n  lang: PropTypes.string,\r\n  meta: PropTypes.arrayOf(PropTypes.object),\r\n  title: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default SEO\r\n"],"sourceRoot":""}