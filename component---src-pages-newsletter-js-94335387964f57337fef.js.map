{"version":3,"sources":["webpack:///./src/pages/newsletter.js","webpack:///./src/components/seo.js"],"names":["Home","data","title","className","allMdx","edges","map","node","key","id","style","textTransform","color","fontSize","href","fields","slug","frontmatter","date","excerpt","query","SEO","description","lang","meta","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","htmlAttributes","titleTemplate","name","content","property","social","twitter","concat","defaultProps"],"mappings":"4FAAA,sIAKe,SAASA,EAAT,GAAyB,IAATC,EAAQ,EAARA,KAC7B,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,MAAM,2BACX,6BAEEC,UAAU,aAEV,4BACE,oDADF,yGAMF,6BAEA,6BAASA,UAAU,0BAChBF,EAAKG,OAAOC,MAAMC,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OACrB,yBAAKC,IAAKD,EAAKE,IACb,yBAAKN,UAAU,qBACb,uBACEO,MAAO,CACLC,cAAe,YACfC,MAAO,uBACPC,SAAU,UAGd,uBAAGV,UAAU,YAAYW,KAAMP,EAAKQ,OAAOC,MACzC,yBAAKb,UAAU,+BACb,wBAAIA,UAAU,cAAcI,EAAKU,YAAYf,OAC7C,0BAAMC,UAAU,cAAcI,EAAKU,YAAYC,MAC/C,6BACA,uBAAGf,UAAU,wBACVI,EAAKU,YAAYE,kBAY/B,IAAMC,EAAK,c,kCClDlB,iDAYMC,EAAM,SAAC,GAAwC,IAAD,MAArCC,EAAqC,EAArCA,YAAaC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,KAAMtB,EAAY,EAAZA,MAC9BuB,EAASC,YAAe,cAAxBD,KAgBFE,EAAkBL,GAAeG,EAAKG,aAAaN,YACnDO,EAAY,UAAGJ,EAAKG,oBAAR,aAAG,EAAmB1B,MAExC,OACE,kBAAC,IAAD,CACE4B,eAAgB,CACdP,QAEFrB,MAAOA,EACP6B,cAAeF,EAAY,QAAWA,EAAiB,KACvDL,KAAM,CACJ,CACEQ,KAAK,cACLC,QAASN,GAEX,CACEO,SAAS,WACTD,QAAS/B,GAEX,CACEgC,SAAS,iBACTD,QAASN,GAEX,CACEO,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,SAAS,UAAAR,EAAKG,oBAAL,mBAAmBO,cAAnB,eAA2BC,UAA3B,IAEX,CACEJ,KAAK,gBACLC,QAAS/B,GAEX,CACE8B,KAAK,sBACLC,QAASN,IAEXU,OAAOb,MAKfH,EAAIiB,aAAe,CACjBf,KAAK,KACLC,KAAM,GACNF,YAAY,IAUCD","file":"component---src-pages-newsletter-js-94335387964f57337fef.js","sourcesContent":["import React from \"react\"\nimport Layout from \"../components/layout\"\nimport { graphql } from \"gatsby\"\nimport SEO from \"../components/seo.js\"\n\nexport default function Home({ data }) {\n  return (\n    <Layout>\n      <SEO title=\"ðŸ’Œ Sunday Times Sunday\" />\n      <section\n        // style={{ paddingBottom: \"0px\", marginBottom: \"-810px\" }}\n        className=\"container\"\n      >\n        <h2>\n          <i>'Sunday Times Sunday'</i> is my weekly newsletter in which I share\n          cool stuff that I consumed in the week and some other bits\n        </h2>\n      </section>\n\n      <hr />\n\n      <section className=\"site-content container\">\n        {data.allMdx.edges.map(({ node }) => (\n          <div key={node.id}>\n            <div className=\"card content-card\">\n              <p\n                style={{\n                  textTransform: \"camelCase\",\n                  color: \"rgba(0, 161, 255, 1)\",\n                  fontSize: \"13px\",\n                }}\n              ></p>\n              <a className=\"card-link\" href={node.fields.slug}>\n                <div className=\"card-body content-card-body\">\n                  <h5 className=\"card-title\">{node.frontmatter.title}</h5>\n                  <span className=\"text-muted\">{node.frontmatter.date}</span>\n                  <hr />\n                  <p className=\"card-text text-muted\">\n                    {node.frontmatter.excerpt}\n                  </p>\n                </div>\n              </a>\n            </div>\n          </div>\n        ))}\n      </section>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allFile {\n      edges {\n        node {\n          id\n          base\n          accessTime(fromNow: true)\n        }\n      }\n    }\n    allMdx(\n      sort: { fields: frontmatter___date, order: DESC }\n      filter: { frontmatter: { type: { eq: \"newsletter\" } } }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            excerpt\n          }\n          id\n        }\n      }\n    }\n  }\n`\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst SEO = ({ description, lang, meta, title }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata?.social?.twitter || ``,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO"],"sourceRoot":""}