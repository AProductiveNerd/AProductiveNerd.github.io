{"version":3,"sources":["webpack:///./src/template/tags.js","webpack:///./src/components/seo.js"],"names":["Tags","data","allMdx","edges","tagHeader","totalCount","title","style","paddingBottom","className","map","node","slug","fields","frontmatter","key","to","date","excerpt","pageQuery","SEO","description","lang","meta","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","htmlAttributes","titleTemplate","name","content","property","social","twitter","concat","defaultProps"],"mappings":"8FAAA,8GAiEeA,UA1DF,SAAC,GAAc,IAAD,IAAXC,KACqBC,OAA3BC,EADiB,EACjBA,MACFC,EAAS,sBAFU,EACVC,WAEf,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,MAAM,WAEX,gCACE,wBAAIC,MAAO,CAAEC,cAAe,SAAWJ,IAEzC,6BAASK,UAAU,0BAChBN,EAAMO,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACJC,EAASD,EAAKE,OAAdD,KACAN,EAAUK,EAAKG,YAAfR,MACR,OACE,yBAAKS,IAAKH,GACR,yBAAKH,UAAU,qBACb,yBAAKA,UAAU,+BACb,wBAAIA,UAAU,cACZ,kBAAC,IAAD,CAAMA,UAAU,YAAYO,GAAIJ,GAC7BN,IAGL,0BAAMG,UAAU,cAAcE,EAAKG,YAAYG,MAC/C,uBAAGR,UAAU,wBACVE,EAAKG,YAAYI,kBAkC/B,IAAMC,EAAS,a,kCClEtB,iDAYMC,EAAM,SAAC,GAAwC,IAAD,MAArCC,EAAqC,EAArCA,YAAaC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,KAAMjB,EAAY,EAAZA,MAC9BkB,EAASC,YAAe,cAAxBD,KAgBFE,EAAkBL,GAAeG,EAAKG,aAAaN,YACnDO,EAAY,UAAGJ,EAAKG,oBAAR,aAAG,EAAmBrB,MAExC,OACE,kBAAC,IAAD,CACEuB,eAAgB,CACdP,QAEFhB,MAAOA,EACPwB,cAAeF,EAAY,QAAWA,EAAiB,KACvDL,KAAM,CACJ,CACEQ,KAAK,cACLC,QAASN,GAEX,CACEO,SAAS,WACTD,QAAS1B,GAEX,CACE2B,SAAS,iBACTD,QAASN,GAEX,CACEO,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,SAAS,UAAAR,EAAKG,oBAAL,mBAAmBO,cAAnB,eAA2BC,UAA3B,IAEX,CACEJ,KAAK,gBACLC,QAAS1B,GAEX,CACEyB,KAAK,sBACLC,QAASN,IAEXU,OAAOb,MAKfH,EAAIiB,aAAe,CACjBf,KAAK,KACLC,KAAM,GACNF,YAAY,IAUCD","file":"component---src-template-tags-js-2cc6945f8e8cde1b65a6.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\n// Components\nimport { Link, graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo.js\"\n\nconst Tags = ({ data }) => {\n  const { edges, totalCount } = data.allMdx\n  const tagHeader = `Number of posts is ${totalCount}`\n  return (\n    <Layout>\n      <SEO title=\"🏷 Tag\" />\n\n      <center>\n        <h1 style={{ paddingBottom: \"20px\" }}>{tagHeader}</h1>\n      </center>\n      <section className=\"site-content container\">\n        {edges.map(({ node }) => {\n          const { slug } = node.fields\n          const { title } = node.frontmatter\n          return (\n            <div key={slug}>\n              <div className=\"card content-card\">\n                <div className=\"card-body content-card-body\">\n                  <h5 className=\"card-title\">\n                    <Link className=\"card-link\" to={slug}>\n                      {title}\n                    </Link>\n                  </h5>\n                  <span className=\"text-muted\">{node.frontmatter.date}</span>\n                  <p className=\"card-text text-muted\">\n                    {node.frontmatter.excerpt}\n                  </p>\n                </div>\n              </div>\n            </div>\n          )\n        })}\n      </section>\n    </Layout>\n  )\n}\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\nexport default Tags\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMdx(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n  }\n`\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst SEO = ({ description, lang, meta, title }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata?.social?.twitter || ``,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO"],"sourceRoot":""}