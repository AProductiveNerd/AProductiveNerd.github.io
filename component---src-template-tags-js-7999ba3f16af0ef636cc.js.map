{"version":3,"sources":["webpack:///./src/template/tags.js","webpack:///./src/components/seo.js"],"names":["Tags","data","allMdx","edges","tagHeader","totalCount","title","style","paddingBottom","className","map","node","slug","fields","frontmatter","key","to","date","excerpt","pageQuery","SEO","description","lang","meta","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","htmlAttributes","titleTemplate","name","content","property","social","twitter","concat","defaultProps"],"mappings":"8FAAA,8GAiEeA,UA1DF,SAAC,GAAc,IAAD,IAAXC,KACqBC,OAA3BC,EADiB,EACjBA,MACFC,EAAS,sBAFU,EACVC,WAEf,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,MAAM,WAEX,gCACE,wBAAIC,MAAO,CAAEC,cAAe,SAAWJ,IAEzC,6BAASK,UAAU,0BAChBN,EAAMO,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACJC,EAASD,EAAKE,OAAdD,KACAN,EAAUK,EAAKG,YAAfR,MACR,OACE,yBAAKS,IAAKH,GACR,yBAAKH,UAAU,qBACb,yBAAKA,UAAU,+BACb,wBAAIA,UAAU,cACZ,kBAAC,IAAD,CAAMA,UAAU,YAAYO,GAAIJ,GAC7BN,IAGL,0BAAMG,UAAU,cAAcE,EAAKG,YAAYG,MAC/C,uBAAGR,UAAU,wBACVE,EAAKG,YAAYI,kBAkC/B,IAAMC,EAAS,a,kCClEtB,iDAYMC,EAAM,SAAC,GAAwC,IAAD,MAArCC,EAAqC,EAArCA,YAAaC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,KAAMjB,EAAY,EAAZA,MAC9BkB,EAASC,YAAe,cAAxBD,KAgBFE,EAAkBL,GAAeG,EAAKG,aAAaN,YACnDO,EAAY,UAAGJ,EAAKG,oBAAR,aAAG,EAAmBrB,MAExC,OACE,kBAAC,IAAD,CACEuB,eAAgB,CACdP,QAEFhB,MAAOA,EACPwB,cAAeF,EAAY,QAAWA,EAAiB,KACvDL,KAAM,CACJ,CACEQ,KAAK,cACLC,QAASN,GAEX,CACEO,SAAS,WACTD,QAAS1B,GAEX,CACE2B,SAAS,iBACTD,QAASN,GAEX,CACEO,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,SAAS,UAAAR,EAAKG,oBAAL,mBAAmBO,cAAnB,eAA2BC,UAA3B,IAEX,CACEJ,KAAK,gBACLC,QAAS1B,GAEX,CACEyB,KAAK,sBACLC,QAASN,IAEXU,OAAOb,MAKfH,EAAIiB,aAAe,CACjBf,KAAK,KACLC,KAAM,GACNF,YAAY,IAUCD","file":"component---src-template-tags-js-7999ba3f16af0ef636cc.js","sourcesContent":["import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\n// Components\r\nimport { Link, graphql } from \"gatsby\"\r\nimport Layout from \"../components/layout\"\r\nimport SEO from \"../components/seo.js\"\r\n\r\nconst Tags = ({ data }) => {\r\n  const { edges, totalCount } = data.allMdx\r\n  const tagHeader = `Number of posts is ${totalCount}`\r\n  return (\r\n    <Layout>\r\n      <SEO title=\"🏷 Tag\" />\r\n\r\n      <center>\r\n        <h1 style={{ paddingBottom: \"20px\" }}>{tagHeader}</h1>\r\n      </center>\r\n      <section className=\"site-content container\">\r\n        {edges.map(({ node }) => {\r\n          const { slug } = node.fields\r\n          const { title } = node.frontmatter\r\n          return (\r\n            <div key={slug}>\r\n              <div className=\"card content-card\">\r\n                <div className=\"card-body content-card-body\">\r\n                  <h5 className=\"card-title\">\r\n                    <Link className=\"card-link\" to={slug}>\r\n                      {title}\r\n                    </Link>\r\n                  </h5>\r\n                  <span className=\"text-muted\">{node.frontmatter.date}</span>\r\n                  <p className=\"card-text text-muted\">\r\n                    {node.frontmatter.excerpt}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )\r\n        })}\r\n      </section>\r\n    </Layout>\r\n  )\r\n}\r\nTags.propTypes = {\r\n  pageContext: PropTypes.shape({\r\n    tag: PropTypes.string.isRequired,\r\n  }),\r\n  data: PropTypes.shape({\r\n    allMarkdownRemark: PropTypes.shape({\r\n      totalCount: PropTypes.number.isRequired,\r\n      edges: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          node: PropTypes.shape({\r\n            frontmatter: PropTypes.shape({\r\n              title: PropTypes.string.isRequired,\r\n            }),\r\n            fields: PropTypes.shape({\r\n              slug: PropTypes.string.isRequired,\r\n            }),\r\n          }),\r\n        }).isRequired\r\n      ),\r\n    }),\r\n  }),\r\n}\r\nexport default Tags\r\nexport const pageQuery = graphql`\r\n  query($tag: String) {\r\n    allMdx(\r\n      limit: 2000\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      filter: { frontmatter: { tags: { in: [$tag] } } }\r\n    ) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            title\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n","/**\r\n * SEO component that queries for data with\r\n *  Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.com/docs/use-static-query/\r\n */\r\n\r\nimport React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { Helmet } from \"react-helmet\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nconst SEO = ({ description, lang, meta, title }) => {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            social {\r\n              twitter\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  const metaDescription = description || site.siteMetadata.description\r\n  const defaultTitle = site.siteMetadata?.title\r\n\r\n  return (\r\n    <Helmet\r\n      htmlAttributes={{\r\n        lang,\r\n      }}\r\n      title={title}\r\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\r\n      meta={[\r\n        {\r\n          name: `description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          property: `og:description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:type`,\r\n          content: `website`,\r\n        },\r\n        {\r\n          name: `twitter:card`,\r\n          content: `summary`,\r\n        },\r\n        {\r\n          name: `twitter:creator`,\r\n          content: site.siteMetadata?.social?.twitter || ``,\r\n        },\r\n        {\r\n          name: `twitter:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          name: `twitter:description`,\r\n          content: metaDescription,\r\n        },\r\n      ].concat(meta)}\r\n    />\r\n  )\r\n}\r\n\r\nSEO.defaultProps = {\r\n  lang: `en`,\r\n  meta: [],\r\n  description: ``,\r\n}\r\n\r\nSEO.propTypes = {\r\n  description: PropTypes.string,\r\n  lang: PropTypes.string,\r\n  meta: PropTypes.arrayOf(PropTypes.object),\r\n  title: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default SEO"],"sourceRoot":""}